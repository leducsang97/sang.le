{"version":3,"sources":["assets/pics/profilePic.png","Pages/Home.js","Pages/About.js","ContentRouter.js","Pages/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","titleContainer","display","flexDirection","justifyContent","alignContent","title","About","classes","src","profileImg","alt","className","ContentRouter","path","component","Pages","root","margin","spacing","IconButtons","useState","openCopiedMessage","setOpenCopiedMessage","handleClose","event","reason","href","target","IconButton","aria-label","disabled","color","text","onClick","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","action","key","SnackbarContent","copiedNotification","message","id","height","width","gridTemplateColumns","gridTemplateRows","justifyItems","content","gridRow","gridColumn","alignItems","nav","position","top","right","button","typography","backgroundColor","palette","background","paper","padding","footer","bottom","App","to","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,wC,qMCIrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,eAAgB,CACfC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,aAAc,UAEfC,MAAO,CACNJ,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,aAAc,cAiBDE,MAbf,WACC,IAAMC,EAAUV,IAChB,OACC,6BACC,yBAAKW,IAAKC,IAAYC,IAAI,mBAC1B,yBAAKC,UAAWJ,EAAQP,gBACvB,wBAAIW,UAAWJ,EAAQF,OAAvB,WACA,uBAAGM,UAAWJ,EAAQF,OAAtB,iCCTWC,MAff,WACC,OACC,6zBCUaM,EAVO,WACrB,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,IAC3B,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWC,IAC/B,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWC,M,6HCC7BlB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCiB,KAAM,CACL,QAAS,CACRC,OAAQlB,EAAMmB,QAAQ,SAKV,SAASC,IACvB,IAAMZ,EAAUV,IADqB,EAEauB,oBAAS,GAFtB,mBAE9BC,EAF8B,KAEXC,EAFW,KASrC,SAASC,EAAYC,EAAOC,GACZ,cAAXA,GAGJH,GAAqB,GAGtB,OACC,yBAAKX,UAAWJ,EAAQS,MACvB,uBAAGU,KAAK,uCAAuCC,OAAO,SACrD,kBAACC,EAAA,EAAD,CAAYC,aAAW,YACtB,kBAAC,IAAD,QAGF,uBAAGH,KAAK,iCAAiCC,OAAO,SAC/C,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAASC,UAAQ,EAACC,MAAM,WAC9C,kBAAC,IAAD,QAGF,uBAAGL,KAAK,uCAAuCC,OAAO,SACrD,kBAACC,EAAA,EAAD,CAAYG,MAAM,OAAOF,aAAW,gBACnC,kBAAC,IAAD,QAGF,kBAAC,kBAAD,CAAiBG,KA7BG,yBA8BnB,kBAACJ,EAAA,EAAD,CAAYG,MAAM,QAAQF,aAAW,oBAAoBI,QAAS,WA3BpEX,GA2BqF,KAClF,kBAAC,IAAD,QAIF,kBAACY,EAAA,EAAD,CACCC,aAAc,CACbC,SAAU,SACVC,WAAY,SAEbC,KAAMjB,EACNkB,iBAAkB,IAClBC,QAASjB,EACTkB,aAAc,CACb,mBAAoB,2BAErBC,OAAQ,CACP,kBAACd,EAAA,EAAD,CAAYe,IAAI,QAAQd,aAAW,QAAQE,MAAM,UAAUE,QAASV,GACnE,kBAAC,IAAD,SAGF,kBAACqB,EAAA,EAAD,CACCjC,UAAWJ,EAAQsC,mBACnBC,QACC,0BAAMC,GAAG,kBAAkBpC,UAAWJ,EAAQuC,SAA9C,oBCtEN,IAAMjD,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCiB,KAAM,CACLf,QAAS,OACT+C,OAAQ,OACRC,MAAO,OACPC,oBAAqB,cACrBC,iBAAkB,iBAElBC,aAAc,UAEfC,QAAS,CACRJ,MAAO,OACPK,QAAS,SACTC,WAAY,QACZtD,QAAS,OACTC,cAAe,SACfsD,WAAY,SACZrD,eAAgB,UAEjBsD,IAAK,CACJxD,QAAS,OACTgD,MAAO,OACP9C,eAAgB,SAChBuD,SAAU,QACVC,IAAK,EACLC,MAAO,GAERC,OAAO,2BACH9D,EAAM+D,WAAWD,QADf,IAELE,gBAAiBhE,EAAMiE,QAAQC,WAAWC,MAC1CC,QAASpE,EAAMmB,QAAQ,GACvBjB,QAAS,SAEVmE,OAAQ,CACPnE,QAAS,OACTgD,MAAO,OACP9C,eAAgB,SAChBuD,SAAU,QACVW,OAAQ,EACRT,MAAO,OA6BMU,EAzBH,WACX,IAAM/D,EAAUV,IAChB,OACC,kBAAC,IAAD,KACC,yBAAKc,UAAWJ,EAAQS,MACvB,yBAAKL,UAAWJ,EAAQ8C,SACvB,yBAAK1C,UAAWJ,EAAQkD,KACvB,kBAAC,IAAD,CAAMc,GAAG,SACR,kBAACC,EAAA,EAAD,CAAQjE,QAAS,CAAES,KAAMT,EAAQsD,SAAjC,SAED,kBAAC,IAAD,CAAMU,GAAG,UACR,kBAACC,EAAA,EAAD,CAAQjE,QAAS,CAAES,KAAMT,EAAQsD,SAAjC,WAIF,kBAAC,EAAD,MACA,yBAAKlD,UAAWJ,EAAQ6D,QACvB,kBAAC,EAAD,WCtDcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.7829167d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePic.de038cd3.png\";","import React from 'react';\nimport profileImg from '../assets/pics/profilePic.png';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n\ttitleContainer: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'center',\n\t\talignContent: 'center'\n\t},\n\ttitle: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t\talignContent: 'center'\n\t}\n}));\n\nfunction About() {\n\tconst classes = useStyles();\n\treturn (\n\t\t<div>\n\t\t\t<img src={profileImg} alt=\"Italian Trulli\" />\n\t\t\t<div className={classes.titleContainer}>\n\t\t\t\t<h1 className={classes.title}>Sang Le</h1>\n\t\t\t\t<p className={classes.title}>Software Engineer @ Dodles</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default About;\n","import React from 'react';\n\nfunction About() {\n\treturn (\n\t\t<div>\n\t\t\tHi! I'm Sang Le. I'm a recent graduate from Lawrence University, where I earned my undergraduate degree in math\n\t\t\tand computer science. I'm currently working at Dodles as a Software Engineer focus on Front End. The project that\n\t\t\tI have been working on is Hashtagr, which helps customer boost their interactions on social media platforms. The\n\t\t\ttech stacks I used are React/Redux with the Material UI theme. On top of that, we use Cordova to translate\n\t\t\tJavascript App to Mobile Native App. The application is currently available in the App Store, Google Play, and\n\t\t\twebsite. If you have some time, check it out, and lets it alleviate your Instagram or LinkedIn experience. I\n\t\t\tincluded more information about myself below, and feel free to reach out as I am always open to new opportunities\n\t\t\tand challenges.\n\t\t</div>\n\t);\n}\n\nexport default About;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport * as Pages from './Pages';\n\nconst ContentRouter = () => {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route path=\"/\" component={Pages.Home} />\n\t\t\t<Route path=\"/home\" component={Pages.Home} />\n\t\t\t<Route path=\"/about\" component={Pages.About} />\n\t\t</Switch>\n\t);\n};\n\nexport default ContentRouter;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Snackbar, SnackbarContent } from '@material-ui/core';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkIcon from '@material-ui/icons/Link';\nimport EmailIcon from '@material-ui/icons/Email';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\t'& > *': {\n\t\t\tmargin: theme.spacing(1)\n\t\t}\n\t}\n}));\n\nexport default function IconButtons() {\n\tconst classes = useStyles();\n\tconst [openCopiedMessage, setOpenCopiedMessage] = useState(false);\n\n\tconst copiedMessage = 'leducsang97@gmail.com';\n\n\tfunction handleCopy(state) {\n\t\tsetOpenCopiedMessage(state);\n\t}\n\tfunction handleClose(event, reason) {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tsetOpenCopiedMessage(false);\n\t}\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<a href=\"https://www.linkedin.com/in/sangdle/\" target=\"blank\">\n\t\t\t\t<IconButton aria-label=\"Linkedin\">\n\t\t\t\t\t<LinkedInIcon />\n\t\t\t\t</IconButton>\n\t\t\t</a>\n\t\t\t<a href=\"https://github.com/leducsang97\" target=\"blank\">\n\t\t\t\t<IconButton aria-label=\"Github\" disabled color=\"primary\">\n\t\t\t\t\t<GitHubIcon />\n\t\t\t\t</IconButton>\n\t\t\t</a>\n\t\t\t<a href=\"https://www.linkedin.com/in/sangdle/\" target=\"blank\">\n\t\t\t\t<IconButton color=\"Link\" aria-label=\"add an alarm\">\n\t\t\t\t\t<LinkIcon />\n\t\t\t\t</IconButton>\n\t\t\t</a>\n\t\t\t<CopyToClipboard text={copiedMessage}>\n\t\t\t\t<IconButton color=\"Email\" aria-label=\"copy to clipboard\" onClick={() => handleCopy(true)}>\n\t\t\t\t\t<EmailIcon />\n\t\t\t\t</IconButton>\n\t\t\t</CopyToClipboard>\n\t\t\t{/* Copied Notificaiton */}\n\t\t\t<Snackbar\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\thorizontal: 'right'\n\t\t\t\t}}\n\t\t\t\topen={openCopiedMessage}\n\t\t\t\tautoHideDuration={100000}\n\t\t\t\tonClose={handleClose}\n\t\t\t\tContentProps={{\n\t\t\t\t\t'aria-describedby': 'copied-hashtags-message'\n\t\t\t\t}}\n\t\t\t\taction={[\n\t\t\t\t\t<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t]}>\n\t\t\t\t<SnackbarContent\n\t\t\t\t\tclassName={classes.copiedNotification}\n\t\t\t\t\tmessage={\n\t\t\t\t\t\t<span id=\"client-snackbar\" className={classes.message}>\n\t\t\t\t\t\t\tEmail copied\n\t\t\t\t\t\t</span>\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</Snackbar>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport { Link, BrowserRouter as Router } from 'react-router-dom';\nimport ContentRouter from './ContentRouter';\nimport Footer from './Pages/Footer';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tdisplay: 'grid',\n\t\theight: '100%',\n\t\twidth: '100%',\n\t\tgridTemplateColumns: '1fr 1fr 1fr',\n\t\tgridTemplateRows: 'auto auto auto',\n\t\t// alignItems: 'center',\n\t\tjustifyItems: 'center'\n\t},\n\tcontent: {\n\t\twidth: '100%',\n\t\tgridRow: ' 2 / 3',\n\t\tgridColumn: '2 / 3',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t},\n\tnav: {\n\t\tdisplay: 'flex',\n\t\twidth: '100%',\n\t\tjustifyContent: 'center',\n\t\tposition: 'fixed',\n\t\ttop: 0,\n\t\tright: 0\n\t},\n\tbutton: {\n\t\t...theme.typography.button,\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tpadding: theme.spacing(1),\n\t\tdisplay: 'flex'\n\t},\n\tfooter: {\n\t\tdisplay: 'flex',\n\t\twidth: '100%',\n\t\tjustifyContent: 'center',\n\t\tposition: 'fixed',\n\t\tbottom: 0,\n\t\tright: 0\n\t}\n}));\n\nconst App = () => {\n\tconst classes = useStyles();\n\treturn (\n\t\t<Router>\n\t\t\t<div className={classes.root}>\n\t\t\t\t<div className={classes.content}>\n\t\t\t\t\t<div className={classes.nav}>\n\t\t\t\t\t\t<Link to=\"/home\">\n\t\t\t\t\t\t\t<Button classes={{ root: classes.button }}>HOME</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/about\">\n\t\t\t\t\t\t\t<Button classes={{ root: classes.button }}>ABOUT</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ContentRouter />\n\t\t\t\t\t<div className={classes.footer}>\n\t\t\t\t\t\t<Footer />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}